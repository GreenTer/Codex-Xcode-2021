************************************        # глобальные переменные (видно везде)
let MaxNameLenth 							- CamalCase пишутся с Большой буквы

----------------- 							# lazy
lazy var story = "Story"			 		- она всегда VAR, и будет nil до тех пор, пока к ней не обратятся! (имеет параметр :String!)

P.S. этой переменной можно задавать класс, функцию и т.д.


************************************        # params in struc/class/enum  
static maxAge = 100							- принадлежит самому типу! (не экземпляру) Дефолтные значения, обязаны быть!

var age: Int {
	didSet {
		if age > Human.maxAge {}			- чтобы использовать maxAge в экземпляре - нужно указать, откуда он!
	}
}

----------------- 							# P.S. важно!
CatStruct.maxAge 							- вызывается вот так (принадлежит типу) Можем вызвать в struc/enum/class
HumanClass.maxAge 		 					- в классе вызываем static

class var maxAge: Int { 					- вот так можно заменить static (раньше в классе его не было, поэтому так исхищрались)
    return 100
}

-----------------
self 										- означает, внутри типа использовать значения

self == .Bottom 							- пример, как внутри enum'a использовать


************************************        # цифровые параметры и остальные
Int                                         - цифры (округляет до целого числа, в меньшую сторону всегда)
Float                                       - число, с плавающей запятой 32 битное, до 6 разрядов после запятой
Double                                      - число, с плавающей запятой 64 битное, до 15 значений после запятой
String                                      - строка
Bool                                        - true/false
Character                                   - характеристика с 1 символом
CustomStringConvertible                     - все возможные характеристики, какие только могут быть!
1_234_123                                   - underscore, разделение цифр для нашего удобства 
Int? Bool? Dual? String? Float?             - optional


************************************        # constant 		(нельзя изменить)
let const = true                            - константа, всегда создаётся со значением
let const : Character = "a"                 - это характеристика с 1 символом
let MaxNameLenght: Int                      - глобальная переменная (всегда пишется с Большой буквы!)

let array : [CustomStringConvertible] = [5, 5.4, Float(5.4)]  - 


************************************        # var 			(можно переназначать)
var name : String 							- создание переменной (String) без значения
var name, surname, adress : String 			- создание переменных (String) без значения
var name = "Sasha" 							- создание переменной (String) со значением
var MaxNameLenght: Int                      - глобальная переменная (всегда пишется с Большой буквы!)

var letters = Set<Character>()              - создание переменой характеристика с 1 символом

-----------------                           # изменение var
var name, surname : String 					// создали переменные
name = "Sasha" 								// присвоили значение
surname = "Borovitsky" 						// присвоили значение
name = "Lev" 								// ппоменяли значение


************************************        # Bool
true                                        - true  = 1
!true                                       - false = 0
false                                       - false
!false                                      - true

-----------------                           # восклицательный знак, меняет значение, наоборот true/false
let good = true                             // создали переменную
!good                                       // false и не меняет оператор
good = !good                                // false и меняет оператор


************************************        # Optionals
Optionals  - это удобный механизм обработки ситуаций, когда значение переменной может отсутствовать. Значение будет использовано, только если оно есть
  с (?) - объект может быть nil     (Optional binding)
  с (!) - объект не может быть nil  (Forced unwrapping - вынужденное развёртывание)

Inplace unwrapping - это когда с (!). Означает, что переменная только на короткий промежуток времени может быть nil

-----------------                           # Optional
var sumOptional : Int?                      // создали переменную, без значения
sumOptional   = 3                           // присвоили значение
sumOptional! += 2                           // нужно опционад unwrapping сделать, чтобы приплюсовать к нему!!
sumOptional   = nil                         // Optional может принимать nil

-----------------                           # Forced unwrapping
var varStringInteger = "12"                 // String
var varInteger : Int                        // Int (без параметра), либо сразу его задать! (var varInteger : Int = 0)

print(Int(varStringInteger))                // когда переводишь строку к какому либо параметру, она всегда будет Optional !! (ВАЖНО)
print(varStringInteger)                     // String

varInteger = 8                              // мы должны инициализировать переменную! Дать ей параметр, и только потом можем делать +=
varInteger += Int(varStringInteger)!        // Forced unwrapping (!), обязателен, т.к. при переквалификации параметра, он всегда Optional

-----------------                           # примеры
let possibleString: String? = "An optional string."
let forcedString: String = possibleString!  // необходим восклицательный знак

let assumedString: String! = "An implicitly unwrapped optional string."
let implicitString: String = assumedString  // восклицательный знак не нужен

var surveyAnswer: String?                   // surveyAnswer автоматически установится в nil
var apples : Int! = nil
apples = 2
apples = apples + 5


************************************        # работа с текстом
//                                          - это комментарий
/*                                          - это тоже комментарий, но написанный на двух строках */
print()                                     - всё выводит в одну строку
print((a,b))                                - вывести переменные a,b
println()                                   - переносит на следующую строку (уже не актуально)
/()                                         - интерполяция, делается в текстовом формате "/()" для вывода переменной
printin("Red color \(redColor)")            - (cmd) Red color red

let nickname: String? = nil
let fullName: String = "Aliaksandr Baravitski"
print("Hi \(nickname ?? fullName)")         - если nickname не nil, то выведет его! а если nil, то выведет fullName

-----------------
\ 0 (нулевой символ), 
\\ (обратный слэш), 
\t (горизонтальная табуляция), 
\n (новая строка), 
\r (возвращение каретки), 
\ "(двойные кавычки) и \' (одиночные кавычки )

-----------------
Произвольные скалярные величины Юникода, записанные в виде \u{n} , где n - 1-8 значное шестнадцатиричное число со значением, равным действительной точке кода Юникода

-----------------                           # примеры
print("\(String(describing: serStatus_1.message))")






