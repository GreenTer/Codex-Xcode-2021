Enum 		- нужен для перечисления, и выбора одного елемента из него
Class 		- работает как ссылка (в отличаи от структуры) + нужна инициализация !
Structures 	- меняешь в одном месте, меняется в одном месте (у структуры наоборот!)

Stored Properties 	- сохраняет данные, непосредственно в самой Properties, есть обсерверы (willSet/didSet), но нету get & set
Computer Properties - используют другие переменные, и выдаёт обработку их! есть get & set, но нету обсерверов (willSet/didSet)


************************************        # Options
Переменная 	var  - это (mutuble) когда ты можешь в определённую область памяти перезаписывать данные
Константа 	let  - это когда ты не можешь в определённую область перезаписывать данные
Булевое 	Bool - это true/false

-----------------
Тюплс      (tuple)	   - это не массив, это просто группа данных. Он нужен для выполнения функций и краткосрочных операций (не соблюдает порядок)
Массив 	   [array]	   - это упорядоченная коллекция данных
Dictionary [key:value] - это неупорядоченные коллекции, хранящие пары "ключ-значение"
	Это означает, что вы не можете по ошибке вставить неверное значение в коллекцию (он не сохраняет порядок вложенных данных!! будь внимателен)
	Так же, он всегда хранит данные ОПЦИОНАЛЬНЫЕ!! имей ввиду, т.к. значение может быть nil
	Он обеспечивает очень быстрый доступ по ключам

-----------------
Интерполяция - это когда в print(\(some_var))
Конкатена́ция - операция склеивания объектов линейной структуры, обычно строк ("Микро" + "мир")
Underscore 	 - нужен для того чтобы замещать некоторые параметры, и брать из tuples только нужные параметры (let (_, _, check, _) = tupleSimple)
While card   - замещение параметра, если он не нужен (for _ in 0...5 {})
Nested type  - это когда enum в enum'e
 
-----------------
Свойства класса 		- это параметры хранящиеся в классе
Свойства типа 			- это параметры хранящиеся в struc 
Свойства экземпляра 	- это параметры хранящиеся в enum
Глобальная переменная 	- это параметр хранящийся за пределами всего и виден везде!

Subscript 				- Это точно такой-же Computer Properties! Это обращение к нашему экземпляру по индексу. Можем применять к class\struc\enum


************************************        # Optionals
Optionals  - это удобный механизм обработки ситуаций, когда значение переменной может отсутствовать. Значение будет использовано, только если оно есть
  с (?) - объект может быть nil     (Optional binding)
  с (!) - объект не может быть nil  (Forced unwrapping - вынужденное развёртывание)

Inplace unwrapping - это когда с (!). Означает, что переменная только на короткий промежуток времени может быть nil

-----------------                           # Optional
var sumOptional : Int?                      // создали переменную, без значения
sumOptional   = 3                           // присвоили значение
sumOptional! += 2                           // нужно опционад unwrapping сделать, чтобы приплюсовать к нему!!
sumOptional   = nil                         // Optional может принимать nil

-----------------                           # Forced unwrapping
var varStringInteger = "12"                 // String
var varInteger : Int                        // Int (без параметра), либо сразу его задать! (var varInteger : Int = 0)

print(Int(varStringInteger))                // когда переводишь строку к какому либо параметру, она всегда будет Optional !! (ВАЖНО)
print(varStringInteger)                     // String

varInteger = 8                              // мы должны инициализировать переменную! Дать ей параметр, и только потом можем делать +=
varInteger += Int(varStringInteger)!        // Forced unwrapping (!), обязателен, т.к. при переквалификации параметра, он всегда Optional


************************************        # Value type - это когда меняешь одну переменную, вторая не меняется
var a = 5
var b = a
a += 1
b // равно 5


Value binding - это когда байндишь параметры (tuples как пример), не зная их значений! И для этих параметров - создаём условия 